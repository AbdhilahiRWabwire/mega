import groovy.json.JsonSlurperClassic

/**
 * This file contains the commit gradle functions that may be used by multiple files.
 */

/**
 * For Continuous Delivery in Google Play Internal Channel <p/>
 * For Android builds in CD pipeline, read the environment variable and assign to version code
 * For local builds, compute string with formatted date and assign to version code
 * @return app's version code
 */
Integer readVersionCode() {
    def versionCode = System.getenv('APK_VERSION_CODE_FOR_CD')
    if (versionCode != null && !versionCode.isEmpty()) {
        // Jenkins build will compute version code using this variable
        return versionCode.toInteger()
    } else {
        // Local build will compute version code using this function
        return new Date().format("yyDDDHHmm", TimeZone.getTimeZone("GMT")).toInteger()
    }
}

/**
 * For Continuous Delivery with Firebase AppDistribution <p/>
 * For Android builds in CD pipeline, read the environment variable and
 * add to standard version name, in order to distinguish versions on Firebase.
 * For normal builds, use default version name format.
 * @return app's version name tag
 */
String readVersionNameTag() {
    def versionNameTag = System.getenv('APK_VERSION_NAME_TAG_FOR_CD')
    if (versionNameTag != null && !versionNameTag.isEmpty()) {
        return versionNameTag
    } else {
        return ""
    }
}

/**
 * For Continuous Delivery in Google Play Internal Channel <p/>
 * For Android builds in CD pipeline, read the environment variable and
 * add to standard version name, in order to distinguish versions on Internal Channel.
 * For normal builds, use default version name format.
 * @return app's version name channel
 */
String readVersionNameChannel() {
    def versionNameChannel = System.getenv('APK_VERSION_NAME_CHANNEL_FOR_CD')
    if (versionNameChannel != null && !versionNameChannel.isEmpty()) {
        return versionNameChannel
    } else {
        return ""
    }
}

/**
 * For Continuous Delivery with Firebase AppDistribution <p/>
 * Get release note string from environment variable.
 * @return release note to be shown on Firebase. If environment variable is not set,
 *         return "Release Note not available"
 */
String readReleaseNotes() {
    def releaseNote = System.getenv('RELEASE_NOTES_FOR_CD')
    if (releaseNote != null && !releaseNote.isEmpty()) {
        return releaseNote
    } else {
        return "Release Notes not available"
    }
}

/**
 * For Continuous Delivery with Firebase AppDistribution
 * Get tester list from environment. Tester list should be
 * comma-separated list of email address.
 * @returnn tester list or "" if there is no tester
 */
String readTesters() {
    String testers = System.getenv("TESTERS_FOR_CD")
    if (testers == null || testers.trim().isEmpty()) {
        testers = ""
    }
    return testers
}

/**
 * For Continuous Delivery with Firebase AppDistribution
 * Get tester group list from environment. Tester group list should be
 * comma-separated list of group names.
 * @return tester group list or default group list if there is no environment setting
 */
String readTesterGroupList() {
    String groups = System.getenv("TESTER_GROUP_FOR_CD")
    if (groups == null || groups.trim().isEmpty()) {
        groups = "internal_qa, internal_dev, external_qa, external_dev, internal_design"
    }
    return groups
}

/**
 * Check whether we should use prebuilt SDK or local sdk module
 *
 * @return false if environment variable "USE_PREBUILT_SDK" is false. Otherwise return true.
 */
boolean shouldUsePrebuiltSdk() {
    String usePrebuiltSdk = System.getenv("USE_PREBUILT_SDK")
    return usePrebuiltSdk == null || usePrebuiltSdk != "false"
}

boolean isCiBuild() {
    return System.getenv("BUILD_NUMBER") != null
}

/**
 * Check whether we should use combine lint reports into a single file
 *
 * @return true if environment variable "USE_PREBUILT_SDK" is true. Otherwise return false.
 */
boolean shouldCombineLintReports() {
    String combineLintReports = System.getenv("COMBINE_LINT_REPORTS")
    return combineLintReports != null && combineLintReports == "true"
}

/**
 * S
 *
 * @param property the property to query.
 *                  possible value: 'sdk-commit', 'chat-commit', 'sdk-branch', 'chat-branch'
 * @param version version of the pre-built SDK. It can be read at the value of "megaSdkVersion" in
 * project build.gradle file.
 * @return property value
 */
def queryPrebuiltSdkProperty(String property, String version) {
    def commit = "N/A"
    // Only query SDK property in CI. Skip this step in local build to reduce compile time
    if (isCiBuild()) {
        def stdout = new ByteArrayOutputStream()
        def url = "${System.env.ARTIFACTORY_BASE_URL}/artifactory/api/storage/mega-gradle/mega-sdk-android/nz/mega/sdk/sdk/${version}/sdk-${version}.aar?properties"
        exec {
            workingDir '.'
            commandLine 'curl', url
            standardOutput = stdout
        }
        def response = stdout.toString().trim()

        def properties = new JsonSlurperClassic().parseText(response).properties
        if (properties != null && properties.containsKey(property)) {
            commit = properties[property][0]
        }
    }

    return commit
}

/**
 * Get the Git hash for the app.
 *
 * @return commit ID of the app
 */
def getAppGitHash() {
    // Read commit ID from local
    def stdout = new ByteArrayOutputStream()
    exec {
        workingDir './'
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    def commit = stdout.toString().trim()

    println("app_commit = $commit")
    return commit
}

/**
 * Get the Git hash for SDK.
 * If build uses prebuilt SDK, fetch the value from Artifactory.
 * Else, read the value from local SDK folder
 *
 * @param version version of the pre-built SDK.
 * @return commit ID of SDK
 */
def getSdkGitHash(String version) {
    def commit = "N/A"
    if (shouldUsePrebuiltSdk()) {
        commit = queryPrebuiltSdkProperty('sdk-commit', version)
    } else {
        // Read commit ID from local SDK folder
        def stdout = new ByteArrayOutputStream()
        exec {
            workingDir '../sdk/src/main/jni/mega/sdk'
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
        commit = stdout.toString().trim()
    }

    println("sdk_commit = $commit")
    return commit
}

/**
 * Get the Git hash for MEGAchat SDK.
 * If build uses prebuilt SDK, fetch the value from Artifactory.
 * Else, read the value from local MEGAchat SDK folder
 *
 * @param version version of the pre-built SDK.
 * @return commit ID of MEGAchat SDK
 */
def getChatGitHash(String prebuiltSdkVersion) {
    def commit = "N/A"
    if (shouldUsePrebuiltSdk()) {
        commit = queryPrebuiltSdkProperty('chat-commit', prebuiltSdkVersion)
    } else {
        // Read commit ID from local SDK folder
        def stdout = new ByteArrayOutputStream()
        exec {
            workingDir '../sdk/src/main/jni/megachat/sdk'
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
        commit = stdout.toString().trim()
    }

    println("chat_commit = $commit")
    return commit
}

/**
 * Get flag to activate Greeter developer tool from local.properties file.
 */
boolean shouldActivateGreeter() {
    def file = rootProject.file('local.properties')
    if (file.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(file))
        return props["activate_greeter"]?.toBoolean() ?: false
    }
    return false
}

/**
 * Get flag to activate Nocturn developer tool from local.properties file.
 */
boolean shouldActivateNocturn() {
    def file = rootProject.file('local.properties')
    if (file.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(file))
        return props["activate_nocturn"]?.toBoolean() ?: false
    }
    return false
}

/**
 * Get timeout in millis for Nocturn to decide the app is in ANR state.
 */
Long getNocturnTimeout() {
    def defaultTimeout = 2000L

    def file = rootProject.file('local.properties')
    if (file.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(file))
        return props["nocturn_timeout"]?.toLong() ?: defaultTimeout
    }
    return defaultTimeout
}

/**
 * Check gradle command parameter to decide whether it is debug build.
 * @param taskNames list of gradle parameters, e.g. ["clean", "app:assembleGmsDebug"]
 * @return whether user wants to create a DEBUG build.
 */
boolean isDebugBuild(List<String> taskNames) {
    def debugBuild = false
    taskNames
            .collect { it.toLowerCase() }
            .forEach { name ->
                if (!name.contains("clean") && (name.contains("debug") || name.contains("qa"))) {
                    debugBuild =  true
                }
            }
    return debugBuild
}

/**
 * Ensure that the native libs folder exists and return its relative path.
 * @return path of native library symbols. The returned path is relative to root of app module
 */
String nativeLibsDir() {
    exec {
        workingDir '../'
        commandLine 'mkdir', '-p', 'sdk/src/main/obj/local'
    }
    return '../sdk/src/main/obj/local'
}

ext {
    readVersionCode = this.&readVersionCode
    readVersionNameTag = this.&readVersionNameTag
    readVersionNameChannel = this.&readVersionNameChannel
    readReleaseNotes = this.&readReleaseNotes
    readTesters = this.&readTesters
    readTesterGroupList = this.&readTesterGroupList
    shouldUsePrebuiltSdk = this.&shouldUsePrebuiltSdk
    isCiBuild = this.&isCiBuild
    shouldCombineLintReports = this.&shouldCombineLintReports
    getAppGitHash = this.&getAppGitHash
    getSdkGitHash = this.&getSdkGitHash
    getChatGitHash = this.&getChatGitHash
    shouldActivateGreeter = this.&shouldActivateGreeter
    shouldActivateNocturn = this.&shouldActivateNocturn
    getNocturnTimeout = this.&getNocturnTimeout
    isDebugBuild = this.&isDebugBuild
    nativeLibsDir = this.&nativeLibsDir
}
