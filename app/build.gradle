apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'androidx.navigation.safeargs.kotlin'
apply plugin: 'com.google.firebase.appdistribution'
apply plugin: 'jacoco'
apply plugin: 'com.google.gms.google-services'

apply from: "$project.rootDir/tools/util.gradle"
apply from: "$project.rootDir/tools/sdk.gradle"

configurations {
    jacocoAnt
}

jacoco {
    toolVersion = "0.8.8"
}

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVerion

    buildFeatures {
        dataBinding = true
        viewBinding = true
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion composeCompilerVersion
    }

    defaultConfig {
        applicationId "mega.privacy.android.app"

        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode readVersionCode()
        versionName rootProject.appVersion
        versionNameSuffix "${readVersionNameChannel()}(${readVersionCode()}${readVersionNameTag()})(${getAppGitHash()})"

        multiDexEnabled true
        ndk.abiFilters 'armeabi-v7a', 'x86', 'x86_64', 'arm64-v8a'

        buildConfigField("String", "USER_AGENT", "\"MEGAAndroid/${versionName}_${versionCode}\"")
        buildConfigField("boolean", "ACTIVATE_GREETER", "${shouldActivateGreeter}")
        buildConfigField("boolean", "ACTIVATE_NOCTURN", "${shouldActivateNocturn}")
        buildConfigField("long", "NOCTURN_TIMEOUT", "${getNocturnTimeout}")
        resValue("string", "app_version", "\"${versionName}${versionNameSuffix}\"")
        resValue("string", "sdk_version", "\"${getSdkGitHash(megaSdkVersion)}\"")
        resValue("string", "karere_version", "\"${getChatGitHash(megaSdkVersion)}\"")

        testInstrumentationRunner "test.mega.privacy.android.app.HiltTestRunner"
    }

    sourceSets {

        debug {
            res {
                srcDirs 'src/main/res'
            }
        }

        qa {
            java {
                srcDirs += 'src/qa/java'
            }
            res {
                srcDirs += 'src/qa/res'
            }
        }
    }

    packagingOptions {
        pickFirst 'lib/arm64-v8a/libc++_shared.so'
        pickFirst 'lib/arm64-v8a/libmega.so'
        pickFirst 'lib/arm64-v8a/libjniPdfium.so'
        pickFirst 'lib/arm64-v8a/libmodpdfium.so'
        pickFirst 'lib/arm64-v8a/libmodft2.so'
        pickFirst 'lib/arm64-v8a/libmodpng.so'

        pickFirst 'lib/armeabi-v7a/libc++_shared.so'
        pickFirst 'lib/armeabi-v7a/libmega.so'
        pickFirst 'lib/armeabi-v7a/libjniPdfium.so'
        pickFirst 'lib/armeabi-v7a/libmodpdfium.so'
        pickFirst 'lib/armeabi-v7a/libmodft2.so'
        pickFirst 'lib/armeabi-v7a/libmodpng.so'

        pickFirst 'lib/x86/libc++_shared.so'
        pickFirst 'lib/x86/libmega.so'
        pickFirst 'lib/x86/libjniPdfium.so'
        pickFirst 'lib/x86/libmodpdfium.so'
        pickFirst 'lib/x86/libmodft2.so'
        pickFirst 'lib/x86/libmodpng.so'

        pickFirst 'lib/x86_64/libc++_shared.so'
        pickFirst 'lib/x86_64/libmega.so'
        pickFirst 'lib/x86_64/libjniPdfium.so'
        pickFirst 'lib/x86_64/libmodpdfium.so'
        pickFirst 'lib/x86_64/libmodft2.so'
        pickFirst 'lib/x86_64/libmodpng.so'
    }

    buildTypes {
        debug {
            debuggable true
            //  minifyEnabled false
            //   proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ext.enableCrashlytics = false
        }
        release {
            //  minifyEnabled false
            //  proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        qa {
            initWith debug
            debuggable true
            matchingFallbacks = ['debug', 'release']
        }
    }

    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true
        // Sets Java compatibility to Java 11
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = "11"
        suppressWarnings = shouldSuppressWarnings()
        freeCompilerArgs += "-opt-in=kotlin.RequiresOptIn"
    }

//    task megaSDK(type: Exec, description: 'Compile MEGA SDK via NDK') {
//        workingDir 'src/main/jni'
//        commandLine './build.sh', 'all'
//    }
//
//    tasks.withType(JavaCompile) {
//        compileTask -> compileTask.dependsOn megaSDK
//    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    flavorDimensions "service"
    productFlavors {
        gms {
            dimension "service"
            apply plugin: 'com.google.firebase.crashlytics'
            apply plugin: 'com.google.firebase.firebase-perf'
            firebaseCrashlytics {
                // Enable processing and uploading of native symbols to Crashlytics servers.
                // This flag must be enabled to see properly-symbolicated native
                // stack traces in the Crashlytics dashboard.
                nativeSymbolUploadEnabled true
                unstrippedNativeLibsDir '../sdk/src/main/obj/local'
            }
            firebaseAppDistribution {
                appId = "1:268821755439:android:9b611c50c9f7a503"
                releaseNotes = readReleaseNotes()
                groups = readTesterGroupList()
                testers = readTesters()
            }
        }
    }

    configurations {
        implementation.exclude module: 'protolite-well-known-types'
        implementation.exclude module: 'protobuf-javalite'

        all {
            resolutionStrategy {
                force 'androidx.test:monitor:1.4.0'
            }
        }
    }
    lint {
        checkReleaseBuilds false
        if (shouldCombineLintReports()) {
            checkDependencies true
            htmlReport true
            htmlOutput file("build/reports/combined.html")
        }
    }
    lintOptions {
        abortOnError false
        xmlOutput = file("build/reports/lint-results.xml")


    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    // Modules
    implementation project(':domain')
    implementation project(':core-ui')
    implementation project(':data')
    debugImplementation project(':nocturn')
    qaImplementation project(':screenshot')

    // Jetbrains
    implementation lib.anko.commons
    implementation lib.coroutines.android
    implementation lib.coroutines.core
    implementation lib.kotlin.ktx
    implementation lib.kotlin.stdlib
    implementation lib.kotlin.stdlib.jdk7

    // Android X
    implementation androidx.bundles.lifecycle
    implementation androidx.bundles.navigation
    implementation androidx.appcompat
    implementation androidx.biometric
    implementation androidx.camera.camera2
    implementation androidx.camera.view
    implementation androidx.camera.lifecycle
    implementation androidx.cardview
    implementation androidx.constraintlayout
    implementation androidx.datastore.preferences
    implementation androidx.emoji
    implementation androidx.exifinterface
    implementation androidx.fragment
    implementation androidx.legacy.support
    implementation androidx.multidex
    implementation androidx.palette
    implementation androidx.preferences
    implementation androidx.recyclerview
    implementation androidx.recyclerview.selection
    implementation androidx.viewpager2
    implementation androidx.work.ktx

    // Compose
    implementation platform(androidx.compose.bom)
    implementation androidx.bundles.compose.bom
    implementation androidx.compose.activity
    implementation androidx.compose.viewmodel
    implementation lib.coil
    implementation lib.coil.compose

    // Google
    implementation google.gson
    implementation google.material
    implementation google.exoplayer.core
    implementation google.exoplayer.ui
    implementation google.flexbox
    implementation google.zxing
    implementation google.accompanist.pager
    implementation google.accompanist.flowlayout
    implementation google.accompanist.navigationanimation
    implementation google.autovalue.annotations
    kapt google.autovalue

    // Google GMS
    gmsImplementation lib.billing.client.ktx
    gmsImplementation google.services.location
    gmsImplementation google.services.maps
    gmsImplementation google.maps.utils

    // Firebase
    gmsImplementation platform(google.firebase.bom)
    gmsImplementation google.bundles.firebase.bom

    // Play Core
    implementation google.play.core
    implementation google.play.core.ktx

    // protobuf-java for tombstone debug
    implementation google.protobuff

    // Hilt
    implementation google.hilt.android
    implementation androidx.hilt.work
    implementation androidx.hilt.navigation
    kapt google.hilt.android.compiler
    kapt androidx.hilt.compiler

    // RX
    implementation lib.bundles.rx

    // Fresco
    implementation lib.bundles.fresco
    implementation lib.facebook.inferannotation
    implementation files('src/main/libs/fresco-zoomable.aar')

    // Retrofit
    implementation lib.retrofit
    implementation lib.retrofit.gson

    // Logging
    implementation lib.bundles.logging

    // Other libs
    implementation lib.liveeventbus
    implementation lib.bannerviewpager
    implementation lib.parallaxscroll
    implementation lib.vdurmont.emoji
    implementation lib.code.scanner
    implementation lib.stickyheader
    implementation lib.shimmerlayout
    implementation lib.collapsingtoolbar
    implementation lib.namedregexp
    implementation lib.blurry
    implementation lib.documentscanner
    implementation lib.simplestorage
    implementation (lib.shortcutbadger) {
        artifact{
            type = "aar"
        }
    }

    coreLibraryDesugaring lib.desugar

    if (shouldUsePrebuiltSdk()) {
        // These 2 ExoPlayer libs are created by SDK build. If upgrading ExoPlayer version,
        // remember to upload these 2 files.
        implementation files('src/main/libs/exoplayer-extension-ffmpeg-2.18.1.aar')
        implementation files('src/main/libs/exoplayer-extension-flac-2.18.1.aar')
    } else {
        implementation fileTree(dir: "$rootProject.projectDir/sdk/src/main/jni/ExoPlayer/", include: ['*.aar'])

        implementation files('../sdk/src/main/jni/megachat/webrtc/libwebrtc.jar')
    }

    // Kotlin + coroutines
    // Java Code Coverage
    jacocoAnt 'org.jacoco:org.jacoco.ant:0.8.8:nodeps'

    // Testing dependencies
    testImplementation "junit:junit:$junitVersion"
    testImplementation "com.google.truth:truth:$truthVersion"
    testImplementation "androidx.test.ext:truth:$androidxTestVersion"
    testImplementation "androidx.arch.core:core-testing:$androidxArchCoreVersion"
    testImplementation "androidx.test:core-ktx:$androidxTestVersion"
    testImplementation "androidx.test:core:$androidxTestVersion"
    testImplementation "org.robolectric:robolectric:$roboletricVersion"
    testImplementation "androidx.test.ext:junit-ktx:$androidxTestExtVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.mockito.kotlin:mockito-kotlin:$mockitoKotlinVersion"
    testImplementation "org.mockito:mockito-inline:3.11.2"
    testImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    testImplementation "androidx.test.espresso:espresso-intents:$espressoVersion"
    testImplementation("androidx.test.espresso:espresso-contrib:$espressoVersion") {
        exclude group: 'org.checkerframework', module: 'checker'
        exclude module: "protobuf-lite"
    }
    testImplementation "com.google.dagger:hilt-android-testing:$hiltVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutineTestVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
    testImplementation "app.cash.turbine:turbine:$turbineVersion"
    testImplementation("androidx.test.espresso:espresso-contrib:$espressoVersion") {
        exclude group: 'org.checkerframework', module: 'checker'
        exclude module: "protobuf-lite"
    }
    testImplementation "androidx.work:work-testing:$workVersion"
    testImplementation "androidx.room:room-testing:$roomVersion"
    testImplementation 'androidx.compose.ui:ui-test-junit4'
    implementation 'org.hamcrest:hamcrest-library:1.3'

    androidTestImplementation platform("androidx.compose:compose-bom:$composeBomVersion")
    androidTestImplementation "androidx.test.ext:junit:$androidxTestExtVersion"
    androidTestImplementation "com.google.truth:truth:$truthVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "com.google.dagger:hilt-android-testing:$hiltVersion"
    androidTestImplementation "org.mockito:mockito-core:$mockitoVersion"
    androidTestImplementation "org.mockito.kotlin:mockito-kotlin:$mockitoKotlinVersion"
    androidTestImplementation "org.mockito:mockito-android:$mockitoVersion"
    androidTestImplementation("androidx.test.espresso:espresso-contrib:$espressoVersion") {
        exclude group: 'org.checkerframework', module: 'checker'
        exclude module: "protobuf-lite"
    }
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espressoVersion"
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'

    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$hiltVersion"
    kaptTest "com.google.dagger:hilt-android-compiler:$hiltVersion"
    debugImplementation "androidx.fragment:fragment-testing:$fragmentTestingVersion"
    debugImplementation 'androidx.compose.ui:ui-test-manifest'

    // Live Data testing
    testImplementation 'com.jraska.livedata:testing-ktx:1.2.0'

    //QA
    qaImplementation 'com.google.firebase:firebase-appdistribution:16.0.0-beta03'
    qaImplementation 'androidx.compose.ui:ui-test-manifest'

    lintChecks project(':lint')

    implementation(project(":feature:sync"))
}


task instrumentClasses(dependsOn: 'compileGmsDebugSources') {
    def outputDir = "$buildDir.path/intermediates/classes-instrumented/gms/debug/"
    doLast {
        println 'Instrumenting classes'

        def fileFilter = [
                // data binding
                'android/databinding/**/*.class',
                '**/android/databinding/*Binding.class',
                '**/android/databinding/*',
                '**/androidx/databinding/*',
                '**/BR.*',
                // android
                '**/R.class',
                '**/R$*.class',
                '**/BuildConfig.*',
                '**/Manifest*.*',
                '**/*Test*.*',
                'android/**/*.*',
                // dagger
                '**/*_MembersInjector.class',
                '**/Dagger*Component.class',
                '**/Dagger*Component$Builder.class',
                '**/Dagger*Subcomponent*.class',
                '**/*Subcomponent$Builder.class',
                '**/*Module_*Factory.class',
                '**/di/module/*',
                '**/*_Factory*.*',
                '**/*Module*.*',
                '**/*Dagger*.*',
                '**/*Hilt*.*',
                // kotlin
                '**/*MapperImpl*.*',
                '**/*$ViewInjector*.*',
                '**/*$ViewBinder*.*',
                '**/BuildConfig.*',
                '**/*Component*.*',
                '**/*BR*.*',
                '**/Manifest*.*',
                '**/*$Lambda$*.*',
//                '**/*Companion*.*',
                '**/*Module*.*',
                '**/*Dagger*.*',
                '**/*Hilt*.*',
                '**/*MembersInjector*.*',
                '**/*_MembersInjector.class',
                '**/*_Factory*.*',
                '**/*_Provide*Factory*.*',
//                '**/*Extensions*.*',
                // sealed and data classes
                '**/*$Result.*',
                '**/*$Result$*.*',
                // adapters generated by moshi
                '**/*JsonAdapter.*',
                //entity in domain layer
                '**/domain/entity/*',
                // model in data layer
                '**/data/model/*',
        ]
        def excludesPattern = String.join(" ", fileFilter)

        ant.taskdef(name: 'instrument',
                classname: 'org.jacoco.ant.InstrumentTask',
                classpath: configurations.jacocoAnt.asPath)
        ant.instrument(destdir: outputDir) {
            fileset(dir: "$buildDir.path/intermediates/javac/gmsDebug/classes",
                    excludes: excludesPattern)
            fileset(dir: "$buildDir.path/tmp/kotlin-classes/gmsDebug",
                    excludes: excludesPattern)
        }

        /* Add the instrumented classes to the beginning of classpath */
        testGmsDebugUnitTest.classpath = files(outputDir) + testGmsDebugUnitTest.classpath
    }
}

task createUnitTestCoverageReport(dependsOn: ['instrumentClasses', 'testGmsDebugUnitTest']) {
    doLast {
        ant.taskdef(name: 'report',
                classname: 'org.jacoco.ant.ReportTask',
                classpath: configurations.jacocoAnt.asPath)
        ant.report() {
            executiondata {
                ant.file(file: "$buildDir.path/jacoco/testGmsDebugUnitTest.exec")
            }
            structure(name: 'Coverage') {
                classfiles {
                    fileset(dir: "$buildDir.path/intermediates/javac/gmsDebug/classes")
                    fileset(dir: "$buildDir.path/tmp/kotlin-classes/gmsDebug")
                }
                sourcefiles {
                    fileset(dir: 'src/main/java')
                    fileset(dir: 'src/test/java')
                }
            }
            html(destdir: "$buildDir.path/reports/jacoco/html")
            csv(destfile: "$buildDir.path/reports/jacoco/gmsDebugUnitTestCoverage.csv")
        }
    }
}

/**
 * Gradle task for getting the app git hash
 * Run ./gradlew -q printAppGitHash
 */
task printAppGitHash {
    doLast {
        println getAppGitHash()
    }
}

/**
 * Gradle task for getting the app version name
 * Run ./gradlew -q printAppVersionName
 */
task printAppVersionName {
    doLast {
        println android.defaultConfig.versionName
    }
}

/**
 * Gradle task for getting the pre-build SDK version
 * Run ./gradlew -q printPrebuildSdkVersion
 */
task printPrebuildSdkVersion {
    doLast {
        println megaSdkVersion
    }
}

/**
 * Gradle task for getting the app version name channel
 * Run ./gradlew -q printAppVersionNameChannel
 */
task printAppVersionNameChannel {
    doLast {
        println readVersionNameChannel()
    }
}
